{
  "hash": "888c3398f6289216cb8911935e5c363b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 1\"\nauthor: \"Jeounghyun Kim\"\ndate-modified: \"last-modified\" \nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# **1  Geospatial Data Science with R**\n\n## **1.1 Learning Outcome**\n\nBy completing this hands-on exercise, you will learn how to:\n\n-   Install and load **sf** and **tidyverse** packages in R.\n\n-   Import **geospatial data** using `sf` functions.\n\n-   Import **aspatial data** using `readr`.\n\n-   Explore simple feature data frames with **Base R** and **sf** functions.\n\n-   Assign or transform **coordinate systems** using `sf`.\n\n-   Convert aspatial data into an **sf data frame**.\n\n-   Perform **geoprocessing** with `sf`.\n\n-   Perform **data wrangling** with `dplyr`.\n\n-   Conduct **Exploratory Data Analysis (EDA)** with `ggplot2`.\n\n## **1.2 Data Acquisition**\n\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this hands-on exercise, you are required to extract the necessary data sets from the following sources:\n\n-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)\n\n-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)\n\n-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)\n\n-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)\n\n### **1.2.1 Extracting the geospatial data sets**\n\nTo get started, create a new folder called *Hands-on_Ex* in a working directory.\n\nNext, create a new sub-folder called *Hands-on_ex01* in the newly created *Hands-on_Ex* folder.\n\nIn the `Hands-on_Ex01` folder, create a sub-folder called `data`. Then, inside the `data` sub-folder, create two sub-folders and name them `geospatial` and `aspatial` respectively.\n\nPlace `Master Plan 2014 Subzone Boundary (Web)`, `Pre-Schools Location` and `Cycling Path`zipped files into `geospatial` sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside `geospatial` sub-folder.\n\n## **1.3 Getting Started**\n\nIn this hands-on exercise, two R packages will be used. They are:\n\n-   **sf** for importing, managing, and processing geospatial data, and\n\n-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.\n\n::: callout-note\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\n-   **readr** for importing csv data,\n\n-   **tidyr** for manipulating data,\n\n-   **dplyr** for transforming data, and\n\n-   **ggplot2** for visualising data\n:::\n\nLoad the necessary R packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n\n## **1.4 Importing Geospatial Data**\n\nIn this section, you will learn how to import the following geospatial data into R by using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf**package:\n\n-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,\n\n-   `CyclingPath`, a line feature layer in ESRI shapefile format, and\n\n-   `PreSchool`, a point feature layer in kml file format.\n\n### **1.4.1 Importing polygon feature data in shapefile format**\n\nThe code chunk below uses *st_read()* function of **sf** package to import `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: `dsn` to define the data path and `layer` to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(\n  dsn = \"/Users/jay/Desktop/rapu34/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/Master_plan\",\n  layer = \"MP14_SUBZONE_WEB_PL\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/jay/Desktop/rapu34/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/Master_plan' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.\n\n### **1.4.2 Importing polyline feature data in shapefile form**\n\nThe code chunk below uses *st_read()* function of **sf** package to import `CyclingPath` shapefile into R as line feature data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath <- st_read(\n  dsn = \"/Users/jay/Desktop/rapu34/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/CyclingPath_Apr2025\",\n  layer = \"CyclingPathGazette\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CyclingPathGazette' from data source \n  `/Users/jay/Desktop/rapu34/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/CyclingPath_Apr2025' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\n\nThe message above reveals that there are a total of 4651 features and 19 fields in cyclingpath sf data frame. The geospatial entities are capture in multilinestring object. Similar to the MP19_SUBZONE_WEB_PL shape file, this data set is in in svy21 projected coordinates system too.\n\n### **1.4.3 Importing GIS data in kml format**\n\nThe `PreSchoolsLocation` is in [**kml**](https://en.wikipedia.org/wiki/Keyhole_Markup_Language) format. The code chunk below will be used to import the kml into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_read(\n  dsn = \"/Users/jay/Desktop/rapu34/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/Preschool/PreSchoolsLocation.kml\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/jay/Desktop/rapu34/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/Preschool/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n::: callout-tip\nNotice that in the code chunk above, the complete path and the kml file extension were provided.\n:::\n\nThe message above reveals that `preschool` is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in **wgs84**coordinates system.\n\n## **1.5 Checking the Content of A Simple Feature Data Frame**\n\n### **1.5.1 Working with *st_geometry()***\n\nIn an **sf data frame**, the spatial information is stored in a special list column of class `sfc`.\\\nWhile you could access it directly (e.g., `mpsz$geom` or `mpsz[[1]]`), the recommended and more flexible method is to use the `st_geometry()` function.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n:::\n\n### **1.5.2 Working with glimpse()**\n\nBesides the geometry, it’s important to check the attribute data, and `glimpse()` from dplyr is a quick way to do so.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n\n\n`glimpse()` report reveals the data type of each fields. For example `FMEL-UPD_D` field is in **date** data type and `X_ADDR`, `Y_ADDR`, `SHAPE_L` and `SHAPE_AREA` fields are all in **double-precision values**.\n\n### **1.5.3 Working with *head()***\n\nSometimes we would like to reveal complete information of a feature object, this is the job of [*head()*](https://www.rdocumentation.org/packages/utils/versions/3.6.2/topics/head) of Base R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n\n\n:::\n:::\n\n\n\n::: callout-note\nOne of the useful argument of *head()* is it allows user to select the numbers of record to display (i.e. the n argument).\n:::\n\n## **1.6 Plotting the Geospatial Data**\n\nLooking only at feature information is not sufficient in geospatial analysis; visualising the features is also important, and this can be easily done using the plot() function in R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\nThe plot the sf object by using a specific attribute as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n`plot()` is appropriate for plotting the geospatial object for quick look. For high cartographic quality map, other R package such as **tmap** should be used.\n:::\n\nNow, let us plot the preschool layer ontop of the mpsz layer by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), \n     add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-important\nProf Quiz : Note that the preschool point objects failed to plot ontop of the mpsz layer. Do you know why?\n\nAnswer : The **mpsz (subzone boundaries)** data is in the **SVY21 coordinate system (EPSG:3414, meter-based)**, while the **preschool locations** are in **WGS84 (EPSG:4326, latitude–longitude)**. Since the two layers use different coordinate reference systems, they do not align when plotted together with `plot(..., add=TRUE)`.\n:::\n\nTherefore, you need to correct it as shown below:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_svy21 <- st_transform(preschool, st_crs(mpsz))\n\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool_svy21), add = TRUE, col = \"skyblue\", pch = 16)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n## **1.7 Working with Projection**\n\nA **map projection** (or coordinate reference system, CRS) is a critical property of geospatial data.\\\nWhen performing geoprocessing with multiple datasets, it is essential that they share the same coordinate system; otherwise, the layers will not align properly.\n\nThe process of converting a dataset from one coordinate system to another is known as **projection transformation**. This ensures spatial consistency and allows accurate overlay and analysis of different geospatial layers.\n\n### **1.7.1 Assigning EPSG code to a simple feature data frame**\n\nWhen importing geospatial data into R, a common issue is that the dataset may have a **missing** or **incorrectly assigned coordinate system** (for example, when the `.proj` file of a shapefile is absent).\n\nTo check the coordinate system of a simple feature data frame, the `st_crs()` function from the **sf** package can be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n:::\n\n\n\nAlthough the **mpsz** data frame is projected in SVY21, its output shows EPSG **9001**, which is incorrect. The correct EPSG code for SVY21 should be **3414**.\n\nTo fix this, the `st_set_crs()` function from the **sf** package is used to assign the proper EPSG code.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_set_crs(mpsz, 3414)\n```\n:::\n\n\n\nNow, let us check the CSR again by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n\nNotice that the EPSG code is 3414 now.\n\n### **1.7.2 Transforming the projection of preschool from wgs84 to svy21.**\n\nIn geospatial analytics, data often needs to be converted from a **geographic coordinate system** to a **projected coordinate system**, since geographic coordinates are unsuitable for distance or area calculations.\n\nFor example, the preschool data frame is currently in **WGS84**. In this case, `st_set_crs()` is not appropriate because the data must be **mathematically reprojected**. Instead, the `st_transform()` function is used to convert the dataset from WGS84 to SVY21.\n\nGeometry set for 2290 features\nGeometry type: POINT\nDimension: XYZ\nBounding box: xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range: zmin: 0 zmax: 0\nGeodetic CRS: WGS 84\nFirst 5 geometries:\n\nLet us perform the projection transformation by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_transform(preschool, \n                              crs = 3414)\n```\n:::\n\n\n\n::: callout-note\nIn practice, we need to find out the appropriate project coordinate system to use before performing the projection transformation.\n:::\n\nNext, let us display the content of preschool sf data frame as shown below.\n\n```         \nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to *Bounding box:*, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems.\n\nNow, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\nplot(st_geometry(preschool), add = TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\nNotice that the composite map display like what we want now.\n\n## **1.8 Importing and Converting An Aspatial Data**\n\nSometimes we work with **aspatial data**, such as Airbnb listings. These are not geospatial datasets, but they may include coordinate fields (x and y) that can be used for spatial analysis.\n\nIn this section, the task is to import such data (e.g., `listings.csv` from Airbnb) into R as a tibble, and then convert it into a simple feature data frame for geospatial use.\n\n### **1.8.1 Importing the aspatial data**\n\nSince `listings` data set is in csv file format, we will use [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) of **readr** package to import `listing.csv` as shown the code chunk below. The output R object is called `listings` and it is a [tibble data frame](https://r4ds.had.co.nz/tibbles.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"/Users/jay/Desktop/rapu34/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/Airbnb/listings.csv\")\n```\n:::\n\n\n\nAfter importing the data file into R, Lets examine!\n\nThe code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(listings) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n# A tibble: 3,659 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    <dbl> <chr>       <dbl> <chr>     <chr>               <chr>            <dbl>\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 7 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 8 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n10 369141 5mins fr… 1521514 Elizabeth Central Region      Newton            1.31\n# ℹ 3,649 more rows\n# ℹ 11 more variables: longitude <dbl>, room_type <chr>, price <dbl>,\n#   minimum_nights <dbl>, number_of_reviews <dbl>, last_review <date>,\n#   reviews_per_month <dbl>, calculated_host_listings_count <dbl>,\n#   availability_365 <dbl>, number_of_reviews_ltm <dbl>, license <chr>\n```\n\n\n:::\n:::\n\n\n\nThe Airbnb listings dataset contains **4,252 rows and 16 columns**. The key fields for spatial analysis are **latitude** and **longitude**, given in decimal degrees under the **WGS84 geographic coordinate system**.\n\n### **1.8.2 Creating a simple feature data frame from an aspatial data frame**\n\nThe code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html)of **sf** packages\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n\n### Key Points from the Arguments\n\n-   The **`coords`** argument specifies the column names for coordinates, with the **x-coordinate** listed first, followed by the **y-coordinate**.\n\n-   The **`crs`** argument defines the coordinate system in **EPSG format** (e.g., *EPSG:4326* for WGS84, *EPSG:3414* for Singapore SVY21). Additional codes can be found on [epsg.io](https://epsg.io/?utm_source=chatgpt.com).\n\n-   The **pipe operator (`%>%`)** allows chaining of functions, such as using `st_transform()` to convert the new simple feature data frame into the **SVY21 projected coordinate system**.\n\nThe next step is to examine the structure and content of the newly created simple feature data frame.\n\nLet's examine!\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}